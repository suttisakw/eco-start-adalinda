// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'

// üß≠ Middleware ‡∏´‡∏•‡∏±‡∏Å
export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })

  const { data: { session } } = await supabase.auth.getSession()
  const { pathname } = req.nextUrl

  // Debug logging
  console.log('üîç Middleware Debug:', {
    pathname,
    hasSession: !!session,
    sessionUser: session?.user?.email || 'No user',
    timestamp: new Date().toISOString()
  })

  // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ public ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Å (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô redirect loop)
  const publicPaths = ['/login', '/', '/search', '/category', '/product', '/about', '/contact', '/favorites', '/compare']

  // ‚úÖ ‡∏Å‡∏•‡∏∏‡πà‡∏° path ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤
  const protectedPaths = ['/dashboard', '/settings', '/profile']

  // ‚úÖ ‡∏Å‡∏•‡∏∏‡πà‡∏° path ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å sub-path)
  const adminPaths = ['/admin']

  // ‡πÄ‡∏ä‡πá‡∏Ñ admin paths ‡∏Å‡πà‡∏≠‡∏ô
  if (pathname.startsWith('/admin')) {
    console.log('üîê Admin path detected:', pathname)
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ session ‚Üí redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
    if (!session) {
      console.log('‚ùå No session, redirecting to login')
      const redirectUrl = req.nextUrl.clone()
      redirectUrl.pathname = '/login'
      redirectUrl.searchParams.set('redirectTo', pathname)
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° cache control ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô caching ‡∏Ç‡∏≠‡∏á redirect
      const response = NextResponse.redirect(redirectUrl)
      response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate')
      return response
    }
    
    console.log('‚úÖ Session found, checking admin role for user:', session.user.email)
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ session ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin ‚Üí redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ unauthorized
    try {
      console.log('‡∏ñ‡πâ‡∏≤‡∏°‡∏µ session ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin ‚Üí redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ unauthorized')
      const { data: user, error } = await supabase
        .from('profiles')
        .select('role')
        .eq('user_id', session.user.id)
        .single()

      console.log('üë§ User profile check result:', { user, error })

      if (error || !user || user.role !== 'admin') {
        console.log('‚ùå User is not admin, redirecting to unauthorized')
        const redirectUrl = req.nextUrl.clone()
        redirectUrl.pathname = '/unauthorized'
        return NextResponse.redirect(redirectUrl)
      }
      
      console.log('‚úÖ User is admin, allowing access')
    } catch (error) {
      console.error('‚ùå Error checking admin role:', error)
      const redirectUrl = req.nextUrl.clone()
      redirectUrl.pathname = '/login'
      return NextResponse.redirect(redirectUrl)
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô
    return res
  }

  // ‡∏ñ‡πâ‡∏≤ path ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô public ‚Üí ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ú‡πà‡∏≤‡∏ô
  if (publicPaths.some((path) => pathname.startsWith(path))) {
    return res
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô protected path ‚Üí redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ /login
  if (!session && protectedPaths.some((p) => pathname.startsWith(p))) {
    const redirectUrl = req.nextUrl.clone()
    redirectUrl.pathname = '/login'
    redirectUrl.searchParams.set('redirectTo', pathname)
    return NextResponse.redirect(redirectUrl)
  }

  return res
}

// üß© ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ middleware ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ path ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
export const config = {
  matcher: [
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤ ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô API, static files, ‡πÅ‡∏•‡∏∞ favicon
    '/((?!api|_next/static|_next/image|favicon.ico|.*\\..*).*)',
  ],
}
